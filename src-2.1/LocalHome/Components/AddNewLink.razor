
<h3>Add a new link</h3>

<EditForm Model="@UserLink" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ul>
        <li>
            <label for="newlinktext">Text:</label>
            <InputText id="newlinktext" @bind-Value="UserLink.Text" />
            <ValidationMessage For="@(()=>UserLink.Text)" />
        </li>
        <li>
            <label for="newlinkurl">URL:</label>
            <InputText id="newlinkurl" type="text" @bind-Value="UserLink.Url" />
            <ValidationMessage For="@(()=>UserLink.Url)" />
        </li>
        <li>
            <label for="newlinkimageurl">Image URL:</label>
            <InputText id="newlinkimageurl" type="text" @bind-Value="UserLink.ImageUrl" />
            <ValidationMessage For="@(()=>UserLink.ImageUrl)" />
        </li>
        <li>
            <label for="newlinkinvertcolors">Invert image colors:</label>
            <InputCheckbox id="newlinkinvertcolors" @bind-Value="UserLink.InvertImageColors" />
            <ValidationMessage For="@(()=>UserLink.InvertImageColors)" />
        </li>
    </ul>
    <input type="submit" value="Add new link" />
</EditForm>

@code {
    public UserLink UserLink { get; set; } = new UserLink();
    public bool RemoveMe { get; set; }

    [Parameter]
    public EventCallback<UserLinkEventArgs> OnNewLink { get; set; }

    public async Task HandleValidSubmit() {
        DoAddNewLink();

        await OnNewLink.InvokeAsync(new UserLinkEventArgs(UserLink));
    }

    public void DoAddNewLink() {
        LogInfo();
    }

    private void LogInfo() {
        Console.WriteLine($@"
Text: {UserLink.Text}
Url: {UserLink.Url}
ImageUrl: {UserLink.ImageUrl}
InvertImageColors: {UserLink.InvertImageColors}
");
    }
}
