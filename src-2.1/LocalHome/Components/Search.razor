@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Hosting

@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager
@inject ISearchProviderJsonReader searchReader
@inject IWebHostEnvironment WebHostEnv

    <div class="search-container">
        <div class="fakebox-search-icon"></div>
        @*The oninput is needed to enable getting the text value w/o the text box losing focus*@
        <input type="text" class="searchAndFilter" id="inputTextSearchFilter" @bind-value="SearchText" @bind-value:event="oninput"
               placeholder="Search or filter (esc to clear)"
               @onkeypress="KeyWasPressed"
               @onkeydown="KeyWasPressed" />
        @if (SearchProviders != null && SearchProviders.Count > 0) {
        @* TODO: Change this to InputSelect and see if the bug where the value is not bound initially is fixed *@
        <select class="cleanSelect" id="searchselect" @bind="SearchFormatUrl">
            @foreach (var sp in SearchProviders)
            {
                <option value="@(sp.SearchUrl)">@(sp.DisplayName)</option>
            }
        </select>
        }
        </div>

@code {
    string SearchText { get; set; }
    string SearchFormatUrl { get; set; }
    List<SearchProvider> SearchProviders { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> OnFilter { get; set; }

    protected override async Task OnInitializedAsync() {
        SearchProviders = await GetSearchProvidersAsync();
        SearchFormatUrl = SearchProviders[0].SearchUrl;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        GetFocus("inputTextSearchFilter");
    }

    public async Task KeyWasPressed(KeyboardEventArgs args)
    {
        if (string.Compare("Enter", args.Code, StringComparison.OrdinalIgnoreCase) == 0)
        {
            PerformSearch(SearchText);
        }
        else if (string.Compare("Escape", args.Code, StringComparison.OrdinalIgnoreCase) == 0) {
            ClearSearchTextbox();
            await DoFilter(string.Empty);
        }
        else if (string.Compare("ArrowDown", args.Code, StringComparison.OrdinalIgnoreCase) == 0) {
            SelectNextSearchProvider();
        }
        else if (string.Compare("ArrowUp", args.Code, StringComparison.OrdinalIgnoreCase) == 0) {
            SelectPreviousSearchProvider();
        }
        else {
            await DoFilter(SearchText);
        }
    }
    public async Task DoFilter(string searchText)
    {
        Console.WriteLine($"searchText: '{searchText}'");
        await OnFilter.InvokeAsync(new ChangeEventArgs { Value = SearchText });
    }
    public void ClearSearchTextbox() {
        SearchText = string.Empty;
    }
    public void PerformSearch(string searchText)
    {
        if (SearchFormatUrl == null) { SearchFormatUrl = "https://www.google.com/search?q={0}"; }
        NavManager.NavigateTo(string.Format(SearchFormatUrl, searchText));
    }
    public void GetFocus(string controlId)
    {
        // inputTextSearchFilter
        var obj = JSRuntime.InvokeAsync<string>(
            "MySetFocus", controlId);
    }
    public void SelectNextSearchProvider() {
        if (string.IsNullOrWhiteSpace(SearchFormatUrl)) { return; }
        // find index of current search provider
        int currentIndex = GetCurrentIndexOfSearchProvider();
        if(currentIndex < 0) { return; }
        int nextIndex = (currentIndex + 1) % SearchProviders.Count;

        SearchFormatUrl = SearchProviders[nextIndex].SearchUrl;
    }
    public void SelectPreviousSearchProvider() {
        if (string.IsNullOrWhiteSpace(SearchFormatUrl)) { return; }

        int currentIndex = GetCurrentIndexOfSearchProvider();
        if (currentIndex < 0) { return; }
        if(currentIndex == 0) {
            currentIndex = SearchProviders.Count;
        }
        int nextIndex = (currentIndex - 1) % SearchProviders.Count;

        SearchFormatUrl = SearchProviders[nextIndex].SearchUrl;
    }
    private int GetCurrentIndexOfSearchProvider() {
        int currentIndex = int.MinValue;
        for (var i = 0; i < SearchProviders.Count; i++) {
            if (string.Compare(SearchFormatUrl, SearchProviders[i].SearchUrl, StringComparison.OrdinalIgnoreCase) == 0) {
                currentIndex = i;
                break;
            }
        }

        return currentIndex;
    }
    private async Task<List<SearchProvider>> GetSearchProvidersAsync()
    {
        // TODO: get from some service
        string filepath = System.IO.Path.Combine(WebHostEnv.WebRootPath, "search.json");
        return await searchReader.GetSearchProvidersFromFileAsync(filepath);
    }
}
